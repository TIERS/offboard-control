#!/usr/bin/env python

import sys
import time
import rospy
import numpy as np

from sensor_msgs.msg     import Joy

from geometry_msgs.msg     import Twist
from geometry_msgs.msg     import PoseStamped, Quaternion

from tf.transformations import euler_from_quaternion, quaternion_from_euler


class CMD_Vel_MAVROS_Controller :

    def __init__(self) :
        '''
            Init node, subscribe to position data
        ''' 
        # Init node
        rospy.init_node("CMD_Vel_MAVROS_Controller", anonymous=False)

        # Class attributes
        self.pos = PoseStamped()
        self.speed_multiplier =  rospy.get_param("~velocity_multiplier", 1.5)
        rospy.loginfo("Speed multiplied from joy to mavros local pos is {}".format(self.speed_multiplier))

        # Get pos from PX4 EKF2 that already integrates positioning sources
        self.local_pos_topic = rospy.get_param("~mavros_local_pos_sub_topic", "/mavros/local_position/pose")
        rospy.loginfo("Subscribing to local (mavros) position at {}".format(self.local_pos_topic))

        self.local_pos_sub = rospy.Subscriber(self.local_pos_topic, PoseStamped, self.local_pos_cb)

        # Wait to get local pos lock
        sys.stdout.write("Waiting for (mavros) local pos lock...")
        while not self.pos.header.stamp :
            sys.stdout.write("..")
            sys.stdout.flush()
            time.sleep(0.1)
        self.home_pos = self.pos
        self.command_pos = self.pos
        rospy.loginfo("Home position locked: \n{}".format(self.pos.pose))

        # Subscribe to cmd_vel
        self.cmd_vel_topic =  rospy.get_param("~cmd_vel_sub_topic", "/cmd_vel")
        rospy.loginfo("Subscribing to twist commands at {}".format(self.cmd_vel_topic))

        self.cmd_vel_sub = rospy.Subscriber(self.cmd_vel_topic, Twist, self.cmd_vel_cb)

        # Subscribe to Joy node
        self.joy = Joy()
        self.last_joy_seq = 0
        self.joy_topic =  rospy.get_param("~joy_sub_topic", "/joy")
        rospy.loginfo("Subscribing to Joy commands at {}".format(self.joy_topic))

        self.joy_sub = rospy.Subscriber(self.joy_topic, Joy, self.joy_cb)

        # Publish data
        self.waypoint_pub = rospy.Publisher('/mavros/setpoint_position/local', PoseStamped, queue_size=10)
        self.yaw = 0

    def local_pos_cb(self, pos) :
        '''
            Update position from mavros local pose (callback)
        '''
        self.pos = pos

    def get_yaw(self):
        quat = Quaternion()
        quat = self.pos.pose.orientation 
        quat_np = np.array([quat.x, quat.y, quat.z, quat.w])
        _, _, yaw = euler_from_quaternion(quat_np)
        return yaw
    
    def cmd_vel_cb(self, vel) :
        '''
            Update last cmd_vel command received
            (to be replaced with data from JOY node)
        '''
        self.cmd_vel = vel

    def joy_cb(self, joy_msg) :
        '''
            Update last joy message received
        '''
        self.joy = joy_msg

    def update_command(self, tmr) :
        self.yaw = self.get_yaw()
        sys.stdout.write("\rLocal posiiton is [{:.1f}, {:.1f}, {:.1f}] ... ".format(
                self.pos.pose.position.x,
                self.pos.pose.position.y,
                self.pos.pose.position.z,
                self.yaw
            ))
        
        new_yaw = 0
        new_pose = PoseStamped()
        if self.joy.header.seq > self.last_joy_seq :

            new_pose = self.pos
            self.last_joy_seq = self.joy.header.seq
            self.command_pos = self.pos
            up_down = self.joy.axes [1]
            left_right = self.joy.axes[2]
            forward_backwards = self.joy.axes[3]
            yaw_rotate = self.joy.axes[0]

            sys.stdout.write(" ... joy [{:.1f}, {:.1f}, {:.1f}] received ...".format(
                    up_down, 
                    forward_backwards, 
                    left_right,
                    yaw_rotate
                ))

            new_pose.pose.position.x = new_pose.pose.position.x + self.speed_multiplier * forward_backwards
            new_pose.pose.position.y = new_pose.pose.position.y - self.speed_multiplier * left_right           # TODO Double check
            new_pose.pose.position.z = new_pose.pose.position.z + self.speed_multiplier * up_down
            new_yaw = self.yaw + 0.2* self.speed_multiplier * yaw_rotate
            new_quat = quaternion_from_euler(0, 0, new_yaw)
            new_pose.pose.orientation.x = new_quat[0]
            new_pose.pose.orientation.y = new_quat[1]
            new_pose.pose.orientation.z = new_quat[2]
            new_pose.pose.orientation.w = new_quat[3]

            if new_pose.pose.position.z < 0 :
                new_pose.pose.position.z = 0
        
        else :
            sys.stdout.write(" ... STAY ...")
            new_pose.pose = self.command_pos.pose

        new_pose.header.stamp = rospy.Time.now()

        sys.stdout.write(" ... going to [{:.1f}, {:.1f}, {:.1f}]".format(
                new_pose.pose.position.x,
                new_pose.pose.position.y,
                new_pose.pose.position.z,
                new_yaw
            ))

        self.waypoint_pub.publish(new_pose)

    def run(self) :
        '''
            Infinite loop with 20 Hz sleep
        ''' 
        # Set Rospy rate
        rate = rospy.Rate(20.0)

        # Set objective update timer
        time.sleep(1)
        self.objective_timer = rospy.Timer(rospy.Duration(0.05), self.update_command)

        # Infinite loop
        try:
            while not rospy.is_shutdown() :
                rate.sleep()

        except KeyboardInterrupt :
             rospy.logerr('Keyboard Interrupt detected!')


if __name__ == '__main__':
    '''
        Run the node
    '''
    try:

        # Create new object
        controller = CMD_Vel_MAVROS_Controller()

        # Loop while reading data
        controller.run()

    except rospy.ROSInterruptException:

        pass