#!/usr/bin/env python

import os
import sys
import paho
import rospy
import mavros

from time 				import sleep
from numpy.linalg		import norm
from math				import pi
from math				import sin
from math				import cos
from math				import sqrt
from math				import atan2

from numpy 				import array 		as numpy_array

from geometry_msgs.msg 	import PoseStamped

from mavros_msgs.msg 	import State
from mavros_msgs.srv 	import SetMode
from mavros_msgs.srv 	import CommandTOL
from mavros_msgs.srv 	import CommandBool


class LandingControl() :

    def __init__(self) :
        '''

        '''

        # Init node
        rospy.init_node('UWB_VIO_Landing', anonymous=False)

        #
        self.pos = PoseStamped()
        self.next_pos = PoseStamped()

        # Get pos from PX4 EKF2 that already integrates VIO and/or others
		self.local_pos_sub = rospy.Subscriber('/mavros/local_position/pose', PoseStamped, self.update_current_pos_cb)

        # Wait to get local pos lock
        sys.stdout.write('Waiting for (mavros) local pos lock...")
        while not self.pos.header.stamp :
            sys.stdout.write('..')
            sys.stdout.flush()
        self.home_pos = self.pos
		print("Home position: {}".format(self.pos))

        # Publisher for actual control

        

    def update_current_pos_cb(self, pos) :
		'''
			Update position from mavros local pose.
		'''
		self.pos = pos

    def update_objective(self) :
        '''
            Update objective waypoint in order to land
        '''
        pass