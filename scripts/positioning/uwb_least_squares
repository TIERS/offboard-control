#!/usr/bin/env python

import sys
import json
import time
import rospy
import numpy

from std_msgs.msg       import Float64
from geometry_msgs.msg  import PoseStamped

from utils import relative_position_from_four_meas



class UWBLeastSquares() :
    '''
        ROS Node that estimates position of a single or a set of UWB initiators
        with respect to a set of responders in known positions. It uses a least square
        method to estimate the position.
    '''

    def __init__(self) :
        '''
            TODO Docstring
        '''

        # Init node
        rospy.init_node('UWB_Least_Squares', anonymous=False)

        # Responder positions
        self.responder_offsets = numpy.array([
            [0, 0, 0.23],
            [0, 0.56, 0.23],
            [0.56, 0.56, 0.23],
            [0.56, 0, 0.23]
        ])

        self.pos = PoseStamped()
        self.uav_uwb_pos = PoseStamped()
        self.uav_uwb_pos_acc = [PoseStamped()]*2
        self.ugv_uwb_pos = PoseStamped()
        self.ugv_uwb_pos_acc = [PoseStamped()]*10

        # Custom one-to-four and two-to-four UWB ranging
        self.uwb_range_offset = rospy.get_param("~uwb_range_offset", 0.27)
        # self.custom_uwb_ranges = numpy.ones(4)
        # self.custom_uwb_stamps = [rospy.Time()] * 4

        # self.second_custom_uwb_ranges = numpy.ones(4)
        # self.second_custom_uwb_stamps = [rospy.Time()] * 4

        self.using_custom_uwb = rospy.get_param("~using_custom_uwb", False)    # Do not use Decawave's DRTLS
        self.min_uwb_ranges = False     # At least 2 transceivers should be active...

        self.ugv_x0 = rospy.get_param("~custom_uwb_xsep", 0.6)
        self.ugv_y0 = rospy.get_param("~custom_uwb_ysep", 0.6)
        self.ugv_xoffset = rospy.get_param("~custom_uwb_xoffset", 0.3)
        self.ugv_yoffset = rospy.get_param("~custom_uwb_yoffset", 0.3)

        # Assuming one-to-many UWB ranging
        self.uwb_range_topics = json.loads(
            rospy.get_param("~uwb_range_topics", '["/dwm1001/O2A/distance"]')
        )
        self.num_uwb_responders = len(self.uwb_range_topics)
        self.uwb_ranges = numpy.ones(self.num_uwb_responders)
        self.uwb_stamps = [rospy.Time() for _ in range(self.num_uwb_responders)]

        # UWB Callbacks
        self.uwb_subs = []
        for idx, topic in enumerate(self.uwb_range_topics) : 
            self.uwb_subs.append(
                rospy.Subscriber(topic, Float64, self.uwb_range_cb, idx)
            )

        # UWB Publishers
        uav_uwb_pos_publish_topic = rospy.get_param("~uav_uwb_topic", "/dwm1001/tag/dronie/position")
        ugv_uwb_pos_publish_topic = rospy.get_param("~ugv_uwb_topic", "/dwm1001/tag/dashgo/position")
        uwb_topic_suffix = rospy.get_param("~uwb_topic_suffix_ls", "/ls")
        
        self.uav_uwb_fake_publisher = rospy.Publisher(uav_uwb_pos_publish_topic+uwb_topic_suffix, PoseStamped, queue_size=10)
        self.ugv_uwb_fake_publisher = rospy.Publisher(ugv_uwb_pos_publish_topic+uwb_topic_suffix, PoseStamped, queue_size=10)

    def uwb_range_cb(self, range, idx) :
        '''
            Update UWB range to responder ID given by args[0]
        '''
        self.uwb_ranges[idx] = range.data - self.uwb_range_offset
        if self.uwb_ranges[idx] < 0 :
            self.uwb_ranges[idx] = 0
        self.uwb_stamps[idx] = rospy.Time.now()
    
        
    def calculate_relative_pos_least_squares(self, target) :
        '''
            Calculates relative UGV-UAV positions.
            Assumes one transceiver on the UAV side, and 2/3/4 transceivers on the UGV.
            Uses least squares optimization.
        '''
        ground_distances = self.uwb_ranges[:3] * numpy.cos( numpy.arcsin( (self.pos.pose.position.z - 0.35) / self.uwb_ranges[:3]) )
        
        if not self.uav_uwb_pos.header.stamp :
            # uav_pos, uav_err = relative_position_from_four_meas(ground_distances)
            uav_pos, uav_err = relative_position_from_four_meas(self.uwb_ranges[:3])
            rospy.logwarn("Cannot use previous UAV relative pos for LE search.")
        else :
            xlim = [self.uav_uwb_pos.pose.position.x - 1.2, self.uav_uwb_pos.pose.position.x + 1.2]
            ylim = [self.uav_uwb_pos.pose.position.y - 1.2, self.uav_uwb_pos.pose.position.y + 1.2]
            zlim = [self.pos.pose.position.z - 0.5, self.pos.pose.position.z]
            uav_pos, uav_err = relative_position_from_four_meas(self.uwb_ranges[:3], xlim, ylim, zlim)
        
        # Done estimating relative position
        # rospy.loginfo("\rRelative position estimate: ({}) with error {} and distances {}".format(uav_pos, uav_err, self.uwb_ranges))
        sys.stdout.write("\r --> Relative position estimate: ({})   with error   {}".format(uav_pos, uav_err))
        sys.stdout.flush()
        self.rel_pos_error = uav_err

        # "Fake" UGV pos (compared to DRTLS UWB)
        self.ugv_uwb_pos = PoseStamped()
        self.ugv_uwb_pos.header.stamp = rospy.Time.now()
        self.ugv_uwb_pos.pose.position.x = self.ugv_xoffset
        self.ugv_uwb_pos.pose.position.y = self.ugv_yoffset
        self.ugv_uwb_pos.pose.position.z = 0
        self.ugv_uwb_fake_publisher.publish(self.ugv_uwb_pos)

        # "Fake" UAV pos (compared to DRTLS UWB)
        self.uav_uwb_pos = PoseStamped()
        self.uav_uwb_pos.header.stamp = rospy.Time.now()
        self.uav_uwb_pos.pose.position.x = uav_pos[0]
        self.uav_uwb_pos.pose.position.y = uav_pos[1]
        self.uav_uwb_pos.pose.position.z = self.pos.pose.position.z
        self.uav_uwb_fake_publisher.publish(self.uav_uwb_pos)

        self.uav_uwb_pos_acc.pop(0) and self.uav_uwb_pos_acc.append(self.uav_uwb_pos)
        self.ugv_uwb_pos_acc.pop(0) and self.ugv_uwb_pos_acc.append(self.ugv_uwb_pos)

    def run(self) :
        '''
            Create timer to update filter.
        '''
        
        # Set position calculating timer at 6 Hz
        time.sleep(1)
        rospy_check_rate = rospy.Rate(10.0)
        self.filter_timer = rospy.Timer(rospy.Duration(1.0/6), self.calculate_relative_pos_least_squares)
        
        # Start calculating relative positions
        rospy.loginfo("Starting Least Square Position Calculation...")
        try:

            while not rospy.is_shutdown() :
                # Update objective position and publish it               
                rospy_check_rate.sleep()

        except KeyboardInterrupt :
            rospy.logerr('Keyboard Interrupt detected! Trying to land')

        # Stop objective update timer and land
        self.filter_timer.shutdown()


if __name__ == '__main__':
    '''
        Run the node
    '''

    # Create new filter object
    position_caculator = UWBLeastSquares()

    try:
        # Run the mission control
        position_caculator.run()

    except rospy.ROSInterruptException:
        position_caculator.filter_timer.shutdown()
        rospy.loginfo("UWB Least Square Position Calculation Stopped.")
