#!/usr/bin/env python

import os
import sys
import math
import time
import copy
import rospy
import numpy

from std_msgs.msg       import String
from std_msgs.msg       import Float64

from nav_msgs.msg       import Odometry

from sensor_msgs.msg    import Range

from geometry_msgs.msg  import PoseStamped

from pfilter            import ParticleFilter
from pfilter            import squared_error
from pfilter            import independent_sample

from mpl_toolkits.mplot3d       import Axes3D


class UWBParticleFilter() :
    '''
        ROS Node that estimates position of a single or a set of UWB initiators
        with respect to a set of responders in known positions. It uses a particle
        filter to estimate the position.
    '''

    def __init__(self) :
        '''
            TODO
        '''

        # Init node
        rospy.init_node('UWB_Particle_Filter', anonymous=False)

        # Responder positions
        self.responder_offsets = numpy.array([
            [0, 0, 0.3],
            [0, 0.56, 0.3],
            [0.56, 0.56, 0.3],
            [0.56, 0, 0.3]
        ])

        self.num_particles = rospy.get_param("~num_particles", 400)
        self.uwb_noise = rospy.get_param("~uwb_noise", 0.15)

        # Subscribe to odometry
        self.odom = Odometry()
        self.vio_topic =  rospy.get_param("~local_pos_topic", "/uav/mavros/local_position/pose")
        rospy.loginfo("Subscribing to odometry at {}".format(self.vio_topic))
        self.local_pos_sub = rospy.Subscriber(self.vio_topic, Odometry, self.update_odom)

        
        # Wait to get local pos lock
        sys.stdout.write("Waiting for odom...")
        while not self.pos.header.stamp :
            sys.stdout.write("..")
            sys.stdout.flush()
            time.sleep(0.1)
        self.home_pos = self.pos
        rospy.loginfo("Home position locked: \n{}".format(self.pos.pose))

        # Read VIO odom and calculate particle movement
        self.last_particle_odom = Odometry()
        self.particle_odom = numpy.zeros(2)

        # Custom one-to-four and two-to-four UWB ranging
        self.custom_uwb_ranges = numpy.ones(4)
        self.custom_uwb_stamps = [rospy.Time()] * 4

        self.second_custom_uwb_ranges = numpy.ones(4)
        self.second_custom_uwb_stamps = [rospy.Time()] * 4

        self.using_custom_uwb = rospy.get_param("~using_custom_uwb", False)    # Do not use Decawave's DRTLS
        self.num_uwb_in_use = rospy.get_param("~num_of_custom_uwb", 4)
        self.min_uwb_ranges = False     # At least 2 transceivers should be active...

        self.ugv_x0 = rospy.get_param("~custom_uwb_xsep", 0.6)
        self.ugv_y0 = rospy.get_param("~custom_uwb_ysep", 0.6)
        self.ugv_xoffset = rospy.get_param("~custom_uwb_xoffset", 0.3)
        self.ugv_yoffset = rospy.get_param("~custom_uwb_yoffset", 0.3)

        # UWB Callbacks
        self.custom_uwb_rangeA_sub = rospy.Subscriber("/dwm1001/O2A/distance", Float64, self.custom_uwbA_cb)
        self.custom_uwb_rangeB_sub = rospy.Subscriber("/dwm1001/O2B/distance", Float64, self.custom_uwbB_cb)
        self.custom_uwb_rangeC_sub = rospy.Subscriber("/dwm1001/O2C/distance", Float64, self.custom_uwbC_cb)
        self.custom_uwb_rangeD_sub = rospy.Subscriber("/dwm1001/O2D/distance", Float64, self.custom_uwbD_cb)

        self.second_uwb_rangeA_sub = rospy.Subscriber("/dwm1001/P2A/distance", Float64, self.second_uwbA_cb)
        self.second_uwb_rangeB_sub = rospy.Subscriber("/dwm1001/P2B/distance", Float64, self.second_uwbB_cb)
        self.second_uwb_rangeC_sub = rospy.Subscriber("/dwm1001/P2C/distance", Float64, self.second_uwbC_cb)
        self.second_uwb_rangeD_sub = rospy.Subscriber("/dwm1001/P2D/distance", Float64, self.second_uwbD_cb)

        # UWB Publishers
        self.uav_uwb_topic = rospy.get_param("~uav_uwb_topic", "/dwm1001/tag/dronie/position")
        self.ugv_uwb_topic = rospy.get_param("~ugv_uwb_topic", "/dwm1001/tag/dashgo/position")
        self.uav_uwb_fake_publisher = rospy.Publisher(self.uav_uwb_topic+"/filtered", PoseStamped, queue_size=10)
        self.ugv_uwb_fake_publisher = rospy.Publisher(self.ugv_uwb_topic+"/filtered", PoseStamped, queue_size=10)

    def custom_uwbA_cb(self, range) :
        '''
            Update range to custom UWB A
        '''
        self.custom_uwb_ranges[0] = range.data - 0.27
        if self.custom_uwb_ranges[0] < 0 :
            self.custom_uwb_ranges[0] = 0
        self.custom_uwb_stamps[0] = rospy.Time.now()

    def custom_uwbB_cb(self, range) :
        '''
            Update range to custom UWB B
        '''
        self.custom_uwb_ranges[1] = range.data - 0.27
        if self.custom_uwb_ranges[1] < 0 :
            self.custom_uwb_ranges[1] = 0
        self.custom_uwb_stamps[1] = rospy.Time.now()

    def custom_uwbC_cb(self, range) :
        '''
            Update range to custom UWB C
        '''
        self.custom_uwb_ranges[2] = range.data - 0.27
        if self.custom_uwb_ranges[2] < 0 :
            self.custom_uwb_ranges[2] = 0
        self.custom_uwb_stamps[2] = rospy.Time.now()

    def custom_uwbD_cb(self, range) :
        '''
            Update range to custom UWB D
        '''
        self.custom_uwb_ranges[3] = range.data - 0.27
        if self.custom_uwb_ranges[3] < 0 :
            self.custom_uwb_ranges[3] = 0
        self.custom_uwb_stamps[3] = rospy.Time.now()

    def second_uwbA_cb(self, range) :
        '''
            Update range to custom UWB A
        '''
        self.second_custom_uwb_ranges[0] = range.data - 0.27
        if self.second_custom_uwb_ranges[0] < 0 :
            self.second_custom_uwb_ranges[0] = 0
        self.second_custom_uwb_stamps[0] = rospy.Time.now()

    def second_uwbB_cb(self, range) :
        '''
            Update range to custom UWB B
        '''
        self.second_custom_uwb_ranges[1] = range.data - 0.27
        if self.second_custom_uwb_ranges[1] < 0 :
            self.second_custom_uwb_ranges[1] = 0
        self.second_custom_uwb_stamps[1] = rospy.Time.now()

    def second_uwbC_cb(self, range) :
        '''
            Update range to custom UWB C
        '''
        self.second_custom_uwb_ranges[2] = range.data - 0.27
        if self.second_custom_uwb_ranges[2] < 0 :
            self.second_custom_uwb_ranges[2] = 0
        self.second_custom_uwb_stamps[2] = rospy.Time.now()

    def second_uwbD_cb(self, range) :
        '''
            Update range to custom UWB D
        '''
        self.second_custom_uwb_ranges[3] = range.data - 0.27
        if self.second_custom_uwb_ranges[3] < 0 :
            self.second_custom_uwb_ranges[3] = 0
        self.second_custom_uwb_stamps[3] = rospy.Time.now()
    
    def velocity(self, x) :
        '''
            Use VIO to update position
        '''
        xp = x + self.particle_odom
        return xp

    def add_noise(self, x) :
        '''
            Add noise to the estimations
            TODO add the noise to the measurements instead
        '''
        xp = x + numpy.random.normal(0, self.uwb_noise, x.shape)
        return xp

    def calc_dists(self, x) :
        '''
            Given (Nx2) matrix of positions,
            create N arrays each with the 4
            ranges that should be observed
            from the given positions
        '''
        particles_z = numpy.ones((x.shape[0],1)) * z
        x3d = numpy.append(x, particles_z, axis=1)

        
        y = numpy.zeros((x.shape[0], 4))
        for i, p in enumerate(x3d) :
            for j, q in enumerate(self.responder_offsets) :
                y[i][j] = numpy.linalg.norm(p - q)

        return y

    def calc_weights(self, hypotheses, observations, move=None, z = None) :
        '''
            Calculate particle weights based on error
        '''
        return squared_error(hypotheses, observations, sigma=1.2)

    def update_filter(self, target) :
        pass

    def run(self) :
        '''
            Create timer to update filter.
        '''

        # Set filter update timer at 6 Hz
        time.sleep(1)
        self.filter_timer = rospy.Timer(rospy.Duration(1.0/6), self.update_filter)
        pass


if __name__ == '__main__':
    '''
        Run the node
    '''
    try:

        # Create new filter object
        filter = UWBParticleFilter()

        # Run the mission control
        filter.run()

    except rospy.ROSInterruptException:

        filter.filter_timer.shutdown()
        rospy.loginfo("UWB particle filter stopped.")
