#!/usr/bin/env python

import os
import sys
import math
import time
import copy
import rospy
import numpy

from std_msgs.msg       import String
from std_msgs.msg       import Float64

from nav_msgs.msg       import Odometry

from sensor_msgs.msg    import Range

from geometry_msgs.msg  import PoseStamped

from mpl_toolkits.mplot3d       import Axes3D



class UWBMultiLateral():
    '''
        ROS Node that estimates position of a single or a set of UWB initiators
        with respect to a set of responders in known positions. It uses a triangular method
        to estimate the position.
    '''

    def __init__(self) :
        '''
            TODO
        '''

        # Init node
        rospy.init_node('UWB_Multilateral', anonymous=False)

        # Responder positions
        self.responder_offsets = numpy.array([
            [0, 0, 0.23],
            [0, 0.56, 0.23],
            [0.56, 0.56, 0.23],
            [0.56, 0, 0.23]
        ])

        self.pos = PoseStamped()
        self.uav_uwb_pos = PoseStamped()
        self.uav_uwb_pos_acc = [PoseStamped()]*2
        self.ugv_uwb_pos = PoseStamped()
        self.ugv_uwb_pos_acc = [PoseStamped()]*10

        # # Subscribe to MAVROS position
        # self.odom = Odometry()
        # self.vio_topic =  rospy.get_param("~uav_vio_topic", "/uav/t265/odom/sample")
        # rospy.loginfo("Subscribing to odometry at {}".format(self.vio_topic))
        # self.odom_sub = rospy.Subscriber(self.vio_topic, PoseStamped, self.update_odom)

        # # Wait to get some odometry
        # sys.stdout.write("Waiting for odom...")
        # while not self.pos.header.stamp :
        #     sys.stdout.write("..")
        #     sys.stdout.flush()
        #     time.sleep(0.1)
        # self.home_pos = self.pos
        # rospy.loginfo("Odometry locked. Current odom: \n{}".format(self.odom.pose.pose))

        # Read VIO odom and calculate particle movement
        self.last_particle_odom = Odometry()
        self.particle_odom = numpy.zeros(2)

        # Custom one-to-four and two-to-four UWB ranging
        self.uwb_range_offset = rospy.get_param("~uwb_range_offset", 0.27)
        self.custom_uwb_ranges = numpy.ones(4)
        self.custom_uwb_stamps = [rospy.Time()] * 4

        self.second_custom_uwb_ranges = numpy.ones(4)
        self.second_custom_uwb_stamps = [rospy.Time()] * 4

        self.using_custom_uwb = rospy.get_param("~using_custom_uwb", False)    # Do not use Decawave's DRTLS
        self.num_uwb_in_use = rospy.get_param("~num_of_custom_uwb", 4)
        self.min_uwb_ranges = False     # At least 2 transceivers should be active...

        self.ugv_x0 = rospy.get_param("~custom_uwb_xsep", 0.6)
        self.ugv_y0 = rospy.get_param("~custom_uwb_ysep", 0.6)
        self.ugv_xoffset = rospy.get_param("~custom_uwb_xoffset", 0.3)
        self.ugv_yoffset = rospy.get_param("~custom_uwb_yoffset", 0.3)

        self.max_pos_delay = rospy.get_param("~max_pos_delay", 0.2)

        # UWB pairs to calculate relative pos and average
        # 3rd element means x is calculated with cos (+1) or sin (-1)
        # 4th, 5th elements have to be added to x,y respectively
        # 6th element is the third side of the triangle to estimate angle
        self.uwb_pairs = [
            [0, 3, 1, 0, 0, self.ugv_x0],
            [1, 2, 1, 0, self.ugv_y0, self.ugv_x0],
            [0, 1, -1, 0, 0, self.ugv_y0],
            [3, 2, -1, self.ugv_x0, 0, self.ugv_y0]
        ]

        # UWB Callbacks
        self.custom_uwb_rangeA_sub = rospy.Subscriber("/dwm1001/O2A/distance", Float64, self.custom_uwbA_cb)
        self.custom_uwb_rangeB_sub = rospy.Subscriber("/dwm1001/O2B/distance", Float64, self.custom_uwbB_cb)
        self.custom_uwb_rangeC_sub = rospy.Subscriber("/dwm1001/O2C/distance", Float64, self.custom_uwbC_cb)
        self.custom_uwb_rangeD_sub = rospy.Subscriber("/dwm1001/O2D/distance", Float64, self.custom_uwbD_cb)

        self.second_uwb_rangeA_sub = rospy.Subscriber("/dwm1001/P2A/distance", Float64, self.second_uwbA_cb)
        self.second_uwb_rangeB_sub = rospy.Subscriber("/dwm1001/P2B/distance", Float64, self.second_uwbB_cb)
        self.second_uwb_rangeC_sub = rospy.Subscriber("/dwm1001/P2C/distance", Float64, self.second_uwbC_cb)
        self.second_uwb_rangeD_sub = rospy.Subscriber("/dwm1001/P2D/distance", Float64, self.second_uwbD_cb)

        # UWB Publishers
        self.uav_uwb_topic = rospy.get_param("~uav_uwb_topic", "/dwm1001/tag/dronie/position")
        self.ugv_uwb_topic = rospy.get_param("~ugv_uwb_topic", "/dwm1001/tag/dashgo/position")
        self.uav_uwb_fake_publisher = rospy.Publisher(self.uav_uwb_topic+"/filtered", PoseStamped, queue_size=10)
        self.ugv_uwb_fake_publisher = rospy.Publisher(self.ugv_uwb_topic+"/filtered", PoseStamped, queue_size=10)

    def update_odom_cb(self, pos) :
        '''
            Update odom from VIO
        '''
        self.pos = pos
    
    def custom_uwbA_cb(self, range) :
        '''
            Update range to custom UWB A
        '''
        self.custom_uwb_ranges[0] = range.data - self.uwb_range_offset
        if self.custom_uwb_ranges[0] < 0 :
            self.custom_uwb_ranges[0] = 0
        self.custom_uwb_stamps[0] = rospy.Time.now()

    def custom_uwbB_cb(self, range) :
        '''
            Update range to custom UWB B
        '''
        self.custom_uwb_ranges[1] = range.data - self.uwb_range_offset
        if self.custom_uwb_ranges[1] < 0 :
            self.custom_uwb_ranges[1] = 0
        self.custom_uwb_stamps[1] = rospy.Time.now()

    def custom_uwbC_cb(self, range) :
        '''
            Update range to custom UWB C
        '''
        self.custom_uwb_ranges[2] = range.data - self.uwb_range_offset
        if self.custom_uwb_ranges[2] < 0 :
            self.custom_uwb_ranges[2] = 0
        self.custom_uwb_stamps[2] = rospy.Time.now()

    def custom_uwbD_cb(self, range) :
        '''
            Update range to custom UWB D
        '''
        self.custom_uwb_ranges[3] = range.data - self.uwb_range_offset
        if self.custom_uwb_ranges[3] < 0 :
            self.custom_uwb_ranges[3] = 0
        self.custom_uwb_stamps[3] = rospy.Time.now()

    def second_uwbA_cb(self, range) :
        '''
            Update (second) range to custom UWB A
        '''
        self.second_custom_uwb_ranges[0] = range.data - self.uwb_range_offset
        if self.second_custom_uwb_ranges[0] < 0 :
            self.second_custom_uwb_ranges[0] = 0
        self.second_custom_uwb_stamps[0] = rospy.Time.now()

    def second_uwbB_cb(self, range) :
        '''
            Update (second) range to custom UWB B
        '''
        self.second_custom_uwb_ranges[1] = range.data - self.uwb_range_offset
        if self.second_custom_uwb_ranges[1] < 0 :
            self.second_custom_uwb_ranges[1] = 0
        self.second_custom_uwb_stamps[1] = rospy.Time.now()

    def second_uwbC_cb(self, range) :
        '''
            Update (second) range to custom UWB C
        '''
        self.second_custom_uwb_ranges[2] = range.data - self.uwb_range_offset
        if self.second_custom_uwb_ranges[2] < 0 :
            self.second_custom_uwb_ranges[2] = 0
        self.second_custom_uwb_stamps[2] = rospy.Time.now()

    def second_uwbD_cb(self, range) :
        '''
            Update (second) range to custom UWB D
        '''
        self.second_custom_uwb_ranges[3] = range.data - self.uwb_range_offset
        if self.second_custom_uwb_ranges[3] < 0 :
            self.second_custom_uwb_ranges[3] = 0
        self.second_custom_uwb_stamps[3] = rospy.Time.now()

    def calculate_drone_locate_area(self):
        '''
            Calculates where the drone locate of the tage, top-right, top-left, bottom-right, bottom-left
        '''
        if (self.custom_uwb_ranges[0] <= self.custom_uwb_ranges[1] and self.custom_uwb_ranges[1] > abs(self.ugv_y0))  \
           or (self.custom_uwb_ranges[3] <= self.custom_uwb_ranges[2] and self.custom_uwb_ranges[2] > abs(self.ugv_y0)): 
            y = -1
        else:
            y = 1
        if (self.custom_uwb_ranges[0] <= self.custom_uwb_ranges[3] and self.custom_uwb_ranges[3] > abs(self.ugv_x0))  \
           or (self.custom_uwb_ranges[1] <= self.custom_uwb_ranges[2] and self.custom_uwb_ranges[2] > abs(self.ugv_x0)): 
            x = -1
        else:
            x = 1
        return (x, y)
    

    def calculate_relative_multilateral_poses(self, target) :
        '''
            Calculates relative UGV-UAV position based on 2-4 transceivers on the UGV
        '''

        ground_distances = self.custom_uwb_ranges * numpy.cos( numpy.arcsin( (self.pos.pose.position.z - 0.07) / self.custom_uwb_ranges) )

        est_cnt = 0 # Count how many pairs of transceivers we use to average estimation
        est_x = 0
        est_y = 0

        # UWB pairs to calculate relative pos and average
        # 3rd element means x is calculated with cos (+1) or sin (-1)
        # 4th, 5th elements have to be added to x,y respectively (offsets)
        # 6th element is the third side of the triangle to estimate angle

        (locx, locy) = self.calculate_drone_locate_area()

        diffs = [rospy.Time.now() - stamp - rospy.Duration(self.max_pos_delay) for stamp in self.custom_uwb_stamps]
        for pair in self.uwb_pairs :
            if diffs[pair[0]] < rospy.Duration(0) and diffs[pair[1]] < rospy.Duration(0) :
                est_arg = ( ground_distances[pair[0]]**2 + pair[5]**2 - ground_distances[pair[1]] **2 ) / (2 * ground_distances[pair[0]] * pair[5] )
                if est_arg > -1 and est_arg < 1 :
                    est_theta = math.acos( est_arg )
                    if pair[2] > 0 :
                        est_theta *= locy
                    else :
                        est_theta *= locx
                    # rospy.loginfo("Pair {} -- {}  =========> Theta = {}".format(pair[0], pair[1], est_theta))
                    # sys.stdout.write("Pair {} -- {}  =========> Theta = {}\n".format(pair[0], pair[1], est_theta))
                    if pair[2] > 0 :
                        est_x += ground_distances[pair[0]] * math.cos(est_theta) + pair[3]
                        est_y += ground_distances[pair[0]] * math.sin(est_theta) + pair[4]
                    else :
                        est_x += ground_distances[pair[0]] * math.sin(est_theta) + pair[3]
                        est_y += ground_distances[pair[0]] * math.cos(est_theta) + pair[4]
                    est_cnt += 1
        if est_cnt > 0 :
            est_relative_pos = numpy.array([est_x, est_y]) / est_cnt
            rospy.loginfo("Relative position estimate: ({})".format(est_relative_pos))
            sys.stdout.write("\rRelative position estimate: ({})   ---   {}   ---   {}".format(est_relative_pos, self.custom_uwb_ranges, (locx, locy)))
            sys.stdout.flush()

            # "Fake" UGV pos (compared to DRTLS UWB)
            self.ugv_uwb_pos = PoseStamped()
            self.ugv_uwb_pos.header.stamp = rospy.Time.now()
            self.ugv_uwb_pos.pose.position.x = self.ugv_xoffset
            self.ugv_uwb_pos.pose.position.y = self.ugv_yoffset
            self.ugv_uwb_pos.pose.position.z = 0

            # "Fake" UAV pos (compared to DRTLS UWB)
            self.uav_uwb_pos = PoseStamped()
            self.uav_uwb_pos.header.stamp = rospy.Time.now()
            self.uav_uwb_pos.pose.position.x = est_relative_pos[0]
            self.uav_uwb_pos.pose.position.y = est_relative_pos[1]
            self.uav_uwb_pos.pose.position.z = self.pos.pose.position.z

            self.uav_uwb_pos_acc.pop(0) and self.uav_uwb_pos_acc.append(self.uav_uwb_pos)
            self.ugv_uwb_pos_acc.pop(0) and self.ugv_uwb_pos_acc.append(self.ugv_uwb_pos)

        else :
            rospy.logerr("Could not triangulate with any pair of UGV transceivers.")


    def run(self) :
        '''
            Create timer to update filter.
        '''

        # Set filter update timer at 6 Hz
        time.sleep(1)
        rospy_check_rate = rospy.Rate(10.0)
        self.filter_timer = rospy.Timer(rospy.Duration(1.0/6), self.calculate_relative_multilateral_poses)
        
        # Start calculating relative positions
        rospy.loginfo("Starting Multilateral Position...")
        try:

            while not rospy.is_shutdown() :
                # Update objective position and publish it               
                rospy_check_rate.sleep()

        except KeyboardInterrupt :
            rospy.logerr('Keyboard Interrupt detected! Trying to land')

        # Stop objective update timer and land
        self.filter_timer.shutdown()


if __name__ == '__main__':
    '''
        Run the node
    '''

    # Create new position calculator
    position_calculator = UWBMultiLateral()

    try:
        # Run the mission control
        position_calculator.run()

    except rospy.ROSInterruptException:
        position_calculator.filter_timer.shutdown()
        rospy.loginfo("UWB Multilateral Position Calculation Stopped.")
